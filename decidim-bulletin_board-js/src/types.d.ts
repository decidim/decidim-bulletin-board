export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Represents untyped JSON */
  JSON: any;
};

export type Client = {
  __typename?: 'Client';
  id: Scalars['ID'];
  name: Scalars['String'];
  publicKey?: Maybe<Scalars['JSON']>;
  publicKeyThumbprint?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

/** Autogenerated return type of CreateElectionMutation */
export type CreateElectionMutationPayload = {
  __typename?: 'CreateElectionMutationPayload';
  election?: Maybe<Election>;
  error?: Maybe<Scalars['String']>;
};

export type Election = {
  __typename?: 'Election';
  authority: Client;
  id: Scalars['ID'];
  /** Returns the list of log entries for this election in the bulletin board */
  logEntries: Array<LogEntry>;
  status: Scalars['String'];
  title: Scalars['String'];
  /** Returns the list of trustees for this election */
  trustees: Array<Client>;
};

/** Autogenerated return type of ElectionLogEntryAdded */
export type ElectionLogEntryAddedPayload = {
  __typename?: 'ElectionLogEntryAddedPayload';
  logEntry: LogEntry;
};


export type LogEntry = {
  __typename?: 'LogEntry';
  chainedHash: Scalars['String'];
  client: Client;
  election: Election;
  id: Scalars['ID'];
  messageId: Scalars['String'];
  signedData: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createElection?: Maybe<CreateElectionMutationPayload>;
  openBallotBox?: Maybe<OpenBallotBoxMutationPayload>;
  processKeyCeremonyStep?: Maybe<ProcessKeyCeremonyStepMutationPayload>;
  vote?: Maybe<VoteMutationPayload>;
};


export type MutationCreateElectionArgs = {
  messageId: Scalars['String'];
  signedData: Scalars['String'];
};


export type MutationOpenBallotBoxArgs = {
  messageId: Scalars['String'];
  signedData: Scalars['String'];
};


export type MutationProcessKeyCeremonyStepArgs = {
  messageId: Scalars['String'];
  signedData: Scalars['String'];
};


export type MutationVoteArgs = {
  messageId: Scalars['String'];
  signedData: Scalars['String'];
};

/** Autogenerated return type of OpenBallotBoxMutation */
export type OpenBallotBoxMutationPayload = {
  __typename?: 'OpenBallotBoxMutationPayload';
  election?: Maybe<Election>;
  error?: Maybe<Scalars['String']>;
};

export type PendingMessage = {
  __typename?: 'PendingMessage';
  client: Client;
  election?: Maybe<Election>;
  id: Scalars['ID'];
  signedData: Scalars['String'];
  status: Scalars['String'];
};

/** Autogenerated return type of ProcessKeyCeremonyStepMutation */
export type ProcessKeyCeremonyStepMutationPayload = {
  __typename?: 'ProcessKeyCeremonyStepMutationPayload';
  error?: Maybe<Scalars['String']>;
  pendingMessage?: Maybe<PendingMessage>;
};

export type Query = {
  __typename?: 'Query';
  /** Returns a list of authorities in the bulletin board */
  authorities: Array<Client>;
  /** Returns an election given its unique_id */
  election?: Maybe<Election>;
  /** Returns a list of elections in the bulletin board */
  elections: Array<Election>;
  /** Returns the information for this bulletin board instance */
  me: Client;
  /** Returns the information for a given message */
  pendingMessage?: Maybe<PendingMessage>;
};


export type QueryElectionArgs = {
  uniqueId: Scalars['String'];
};


export type QueryPendingMessageArgs = {
  id: Scalars['ID'];
};

export type Subscription = {
  __typename?: 'Subscription';
  electionLogEntryAdded: ElectionLogEntryAddedPayload;
};


export type SubscriptionElectionLogEntryAddedArgs = {
  electionUniqueId: Scalars['String'];
};

/** Autogenerated return type of VoteMutation */
export type VoteMutationPayload = {
  __typename?: 'VoteMutationPayload';
  error?: Maybe<Scalars['String']>;
  pendingMessage?: Maybe<PendingMessage>;
};
