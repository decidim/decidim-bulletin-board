diff --git a/src/electionguard/rsa.py b/src/electionguard/rsa.py
index e6a6809..572d262 100644
--- a/src/electionguard/rsa.py
+++ b/src/electionguard/rsa.py
@@ -1,20 +1,9 @@
 from typing import Optional, NamedTuple
-from cryptography.hazmat.backends import default_backend
-from cryptography.hazmat.primitives.asymmetric.rsa import (
-    RSAPrivateKey,
-    generate_private_key,
-    RSAPrivateKeyWithSerialization,
-    RSAPublicKey,
-)
-from cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15
-from cryptography.hazmat.primitives.serialization import (
-    Encoding,
-    load_pem_private_key,
-    load_pem_public_key,
-    NoEncryption,
-    PrivateFormat,
-    PublicFormat,
-)
+import rsa.prime
+from gmpy2 import is_prime
+rsa.prime.is_prime = is_prime
+
+import rsa
 
 
 PUBLIC_EXPONENT = 65537
@@ -39,23 +28,11 @@ def rsa_keypair() -> RSAKeyPair:
     :return: RSA key pair
     """
 
-    private_key: RSAPrivateKeyWithSerialization = generate_private_key(
-        public_exponent=PUBLIC_EXPONENT, key_size=KEY_SIZE, backend=default_backend()
-    )
-    private_key_bytes = private_key.private_bytes(
-        encoding=Encoding.PEM,
-        format=PrivateFormat.TraditionalOpenSSL,
-        encryption_algorithm=NoEncryption(),
-    )
-    private_key_string = str(private_key_bytes, ISO_ENCODING)
-
-    public_key: RSAPublicKey = private_key.public_key()
-    public_key_bytes = public_key.public_bytes(
-        encoding=Encoding.PEM, format=PublicFormat.SubjectPublicKeyInfo
+    public, private = rsa.newkeys(KEY_SIZE, exponent=PUBLIC_EXPONENT)
+    return RSAKeyPair(
+        str(private.save_pkcs1(), ISO_ENCODING),
+        str(public.save_pkcs1(), ISO_ENCODING)
     )
-    public_key_string = str(public_key_bytes, ISO_ENCODING)
-
-    return RSAKeyPair(private_key_string, public_key_string)
 
 
 def rsa_encrypt(message: str, public_key: str) -> Optional[str]:
@@ -67,13 +44,13 @@ def rsa_encrypt(message: str, public_key: str) -> Optional[str]:
     :return: Encrypted message
     """
     data = bytes(public_key, ISO_ENCODING)
-    rsa_public_key = load_pem_public_key(data, backend=default_backend())
-    if not isinstance(rsa_public_key, RSAPublicKey):
+    rsa_public_key = rsa.key.PublicKey.load_pkcs1(data)
+    if not isinstance(rsa_public_key, rsa.key.PublicKey):
         return None
     plaintext = bytes.fromhex(message)
     if len(plaintext) > MAX_BITS:
         return None
-    ciphertext = rsa_public_key.encrypt(plaintext, PKCS1v15())
+    ciphertext = rsa.encrypt(plaintext, rsa_public_key)
     return str(ciphertext, ISO_ENCODING)
 
 
@@ -87,14 +64,12 @@ def rsa_decrypt(encrypted_message: str, private_key: str) -> Optional[str]:
     """
 
     data = bytes(private_key, ISO_ENCODING)
-    rsa_private_key = load_pem_private_key(
-        data, password=None, backend=default_backend()
-    )
-    if not isinstance(rsa_private_key, RSAPrivateKey):
+    rsa_private_key = rsa.key.PrivateKey.load_pkcs1(data)
+    if not isinstance(rsa_private_key, rsa.key.PrivateKey):
         return None
     ciphertext = bytes(encrypted_message, ISO_ENCODING)
     try:
-        plaintext = rsa_private_key.decrypt(ciphertext, PKCS1v15())
+        plaintext = rsa.decrypt(ciphertext, rsa_private_key)
     except ValueError:
         return None
     hex_str = plaintext.hex()
