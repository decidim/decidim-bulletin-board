diff --git a/jsons/deserializers/default_list.py b/jsons/deserializers/default_list.py
index 228ea93..5c5ee31 100644
--- a/jsons/deserializers/default_list.py
+++ b/jsons/deserializers/default_list.py
@@ -1,9 +1,6 @@
-from multiprocessing import Process
-
 from typish import get_args

 from jsons._load_impl import load
-from jsons._multitasking import multi_task
 from jsons.exceptions import JsonsError


@@ -12,7 +9,7 @@ def default_list_deserializer(
         cls: type = None,
         *,
         tasks: int = 1,
-        task_type: type = Process,
+        task_type: type = None,
         **kwargs) -> list:
     """
     Deserialize a list by deserializing all items of that list.
@@ -32,10 +29,6 @@ def default_list_deserializer(
         # from and the precedence of classes can be determined.
         kwargs_['_inferred_cls'] = True

-    if tasks == 1:
-        result = [load(elem, cls=cls_, tasks=1, **kwargs_) for elem in obj]
-    elif tasks > 1:
-        result = multi_task(load, obj, tasks, task_type, cls_, **kwargs_)
-    else:
-        raise JsonsError('Invalid number of tasks: {}'.format(tasks))
+    result = [load(elem, cls=cls_, tasks=1, **kwargs_) for elem in obj]
+
     return result
diff --git a/jsons/serializers/default_iterable.py b/jsons/serializers/default_iterable.py
index 7032a80..f219f2f 100644
--- a/jsons/serializers/default_iterable.py
+++ b/jsons/serializers/default_iterable.py
@@ -1,11 +1,9 @@
 from collections.abc import Iterable
-from multiprocessing import Process
 from typing import Tuple, Optional

 from typish import get_args, get_type

 from jsons._dump_impl import dump
-from jsons._multitasking import multi_task
 from jsons.exceptions import SerializationError


@@ -15,7 +13,7 @@ def default_iterable_serializer(
         *,
         strict: bool = False,
         tasks: int = 1,
-        task_type: type = Process,
+        task_type: type = None,
         **kwargs) -> list:
     """
     Serialize the given ``obj`` to a list of serialized objects.
@@ -39,12 +37,8 @@ def default_iterable_serializer(
     else:
         subclasses = _get_subclasses(obj, None)

-    if tasks < 2:
-        result = [dump(elem, cls=subclasses[i], **kwargs_)
-                  for i, elem in enumerate(obj)]
-    else:
-        zipped_objs = list(zip(obj, subclasses))
-        result = multi_task(do_dump, zipped_objs, tasks, task_type, **kwargs_)
+    result = [dump(elem, cls=subclasses[i], **kwargs_)
+              for i, elem in enumerate(obj)]

     return result
