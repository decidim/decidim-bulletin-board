test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
s3:
  service: S3
  access_key_id: <%= ENV['AWS_ACCESS_KEY_ID'] %>
  secret_access_key: <%= ENV['AWS_SECRET_ACCESS_KEY'] %>
  bucket: <%= ENV['AWS_BUCKET_NAME'] %>
  <%= "region: #{ENV['AWS_REGION']}" if ENV['AWS_REGION'].present? %>
  <%= "endpoint: #{ENV['AWS_ENDPOINT']}" if ENV['AWS_ENDPOINT'].present? %>

azure:
  service: AzureStorage
  storage_account_name: <%= env['AZURE_STORAGE_ACCOUNT_NAME'] %>
  storage_access_key: <%= env['AZURE_STORAGE_ACCESS_KEY'] %>
  container: <%= env['AZURE_CONTAINER'] %>

gcs:
  service: GCS
  project: <%= env['GCS_PROJECT`] %>
  bucket: <%= env['GCS_BUCKET`] %>
  credentials:
    type: <%= env['GCS_TYPE`] %>
    project_id: <%= env['GCS_PROJECT_ID`] %>
    private_key_id: <%= env['GCS_PRIVATE_KEY_ID`] %>
    private_key: <%= env['GCS_PRIVATE_KEY`] %>
    client_email: <%= env['GCS_CLIENT_EMAIL`] %>
    client_id: <%= env['GCS_CLIENT_ID`] %>
    auth_uri: <%= env['GCS_AUTH_URI`] %>
    token_uri: <%= env['GCS_TOKEN_URI`] %>
    auth_provider_x509_cert_url: <%= env['GCS_AUTH_PROVIDER_X509_CERT_URL`] %>
    client_x509_cert_url: <%= env['GCS_CLIENT_X509_CERT_URL`] %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]